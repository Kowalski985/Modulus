[
{"ModuleCode": "CS1010", "ModuleTitle": "Programming Methodology", "ModuleDescription": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. It is also the first part of a three-part series on introductory programming and problem solving by computing, which also includes CS1020 and CS2010. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for SoC students.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS1010E", "ModuleTitle": "Programming Methodology", "ModuleDescription": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and the first part of a three-part series on programming and problem solving by computing, which includes CS1020 and CS2010. Topics include problem solving by computing, writing pseudo-codes, problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for FoE students.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS1010J", "ModuleTitle": "Programming Methodology", "ModuleDescription": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. It is also the first part of a three-part series on introductory programming and problem solving by computing, which also includes CS1020E and CS2010. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for B.Comp.(IS) and B.Comp.(EC) students.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS1010R", "ModuleTitle": "Programming Methodology", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS1010S", "ModuleTitle": "Programming Methodology", "ModuleDescription": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010 and CS1010E Programming Methodology. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for FoS students.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS1020", "ModuleTitle": "Data Structures and Algorithms I", "ModuleDescription": "This module is the second part of a three-part series on introductory programming and problem solving by computing. It continues the introduction that begins in CS1010, and emphasises objectoriented programming with application to simple data structures. Topics include object-oriented problem modeling with objects, classes and methods, object-oriented problem formulation and solving, data structure implementation strageties, abstraction and encapsulation of data structures, object-oriented programming constructs, APIs and class libraries, exception handling, lists, linked lists, stacks, queues, hash tables and their algorithmic design, sorting and searching methods, recursive algorithms, and Big-O notation. This module is appropriate for SoC and FoS students.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS1020E", "ModuleTitle": "Data Structures and Algorithms I", "ModuleDescription": "This module is the second part of a three-part series on introductory programming and problem solving by computing. It continues the introduction that begins in CS1010, and emphasises objectoriented programming with application to simple data structures. Topics include object-oriented problem modeling with objects, classes and methods, object-oriented problem formulation and solving, data structure implementation strageties, abstraction and encapsulation of data structures, object-oriented programming constructs, APIs and class libraries, exception handling, lists, linked lists, stacks, queues, hash tables and their algorithmic design, sorting and searching methods, recursive algorithms, and Big-O notation. This module is appropriate for FoE students.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS1101S", "ModuleTitle": "Programming Methodology", "ModuleDescription": "This module introduces the concepts of programming from a functional perspective, and is perceived as the first and foremost introductory course to computing. It is the first of a two part series on introductory programming, which also includes CS1102S. This series is characterized by the use of a minimalist syntax of functional languages that enables an emphasis on fundamental programming issues. Topics covered include: overview of programming languages and compilation process, procedural abstraction, recursion, data abstraction, algorithmic strategies, higher-order functions, state mutation, evaluation strategies, debugging and testing. Module activities include lectures, recitation, tutorial and laboratory exercises.", "Department": "Computer Science", "ModuleCredit": "5"},
{"ModuleCode": "CS1231", "ModuleTitle": "Discrete Structures", "ModuleDescription": "This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications. (2) Relations and Functions: Equivalence relations and partitions. Partially ordered sets. Well-Ordering Principle. Function equality. Boolean/identity/inverse functions. Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle. Number of relations on a set, number of injections from one finite set to another, Diagonalisation proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset. Subsets of countable sets are countable.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS1231R", "ModuleTitle": "Discrete Structures", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS2010", "ModuleTitle": "Data Structures and Algorithms II", "ModuleDescription": "This module is the third part of a three-part series on introductory programming and problem solving by computing. It continues the introduction in CS1010 and CS1020, and emphasises object-oriented programming with application to complex data structures. Topics covered include trees, binary search trees, order property, prefix/infix/postfix expressions, heaps, priority queues, graphs and their algorithmic design, recursive algorithms, problem formulation and problem solving with applications of complex data structures, data structure design principles and implementation strategies, and algorithm analysis. Advanced data structures such as B-trees and AVL trees are also covered.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2010R", "ModuleTitle": "Data Structures and Algorithms II", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS2030", "ModuleTitle": "Programming Methodology II", "ModuleDescription": "This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2040", "ModuleTitle": "Data Structures and Algorithms", "ModuleDescription": "This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, and basic analysis of algorithms.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2040C", "ModuleTitle": "Data Structures and Algorithms", "ModuleDescription": "This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, basic analysis of algorithms, and basic object-oriented programming concepts.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2100", "ModuleTitle": "Computer Organisation", "ModuleDescription": "The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2100R", "ModuleTitle": "Computer Organisation", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS2101", "ModuleTitle": "Effective Communication for Computing Professionals", "ModuleDescription": "This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will be adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural communication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.", "Department": "Ctr For English Language Communication", "ModuleCredit": "4"},
{"ModuleCode": "CS2102", "ModuleTitle": "Database Systems", "ModuleDescription": "The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2102R", "ModuleTitle": "Database Systems", "ModuleDescription": "The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS2103", "ModuleTitle": "Software Engineering", "ModuleDescription": "This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2103R", "ModuleTitle": "Software Engineering", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS2103T", "ModuleTitle": "Software Engineering", "ModuleDescription": "This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2104", "ModuleTitle": "Programming Language Concepts", "ModuleDescription": "This module introduces the concepts that serve as a basis for hundreds of programming languages. It aims to provide the students with a basic understanding and appreciation of the various essential programming-languages constructs, programming paradigms, evaluation criteria and language implementation issues. The module covers concepts from imperative, object-oriented, functional, logic, constraints, and concurrent programming. These concepts are illustrated by examples from varieties of languages such as Pascal, C, Java, Smalltalk, Scheme, Haskell, Prolog. The module also introduces various implementation issues, such as pseudo-code interpretation, static and dynamic semantics, abstract machine, type inferencing, etc.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2104R", "ModuleTitle": "Programming Language Concepts", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS2105", "ModuleTitle": "Introduction to Computer Networks", "ModuleDescription": "This module aims to provide a broad introduction to computer networks and network application programming. It covers the main concepts, the fundamental principles, and the high-level workings of important protocols in each of the Internet protocol layer. Topics include the Web and Web applications, DNS services, socket programming, reliable protocols, transport and network layer protocols, secure communication, LAN, and data communication. Practical assignments and handson exercises expose students to network application programming and various networking tools and utilities.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2105R", "ModuleTitle": "Introduction to Computer Networks", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS2106", "ModuleTitle": "Introduction to Operating Systems", "ModuleDescription": "This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2107", "ModuleTitle": "Introduction to Information Security", "ModuleDescription": "This module serves as an introductory module on information security. It illustrates the fundamentals of how systems fail due to malicious activities and how they can be protected. The module also places emphasis on the practices of secure programming and implementation. Topics covered include classical/historical ciphers, introduction to modern ciphers and cryptosystems, ethical, legal and organisational aspects, classic examples of direct attacks on computer systems such as input validation vulnerability, examples of other forms of attack such as social engineering/phishing attacks, and the practice of secure programming.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2108", "ModuleTitle": "Introduction to Media Computing", "ModuleDescription": "This module introduces students to (i) the fundamental principles, theory, algorithms, and data structures behind digital representation, compression, synchronization, and processing of image, audio, and video data types, and (ii) challenges and issues in developing media-rich applications, such as media streaming and media retrieval. Students will be exposed to the workings of common media file format and common manipulation techniques on media data. After taking the module, students should be confident enough in developing media applications and make appropriate trade-off and design decisions when dealing in media data in their software.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS2220", "ModuleTitle": "Introduction to Computational Biology", "ModuleDescription": "This course aims to develop flexible and logical problem solving skills, understanding of main bioinformatics problems, and appreciation of main techniques and approaches to bioinformatics. Through case studies and hands-on exercises, the student will (i) master the basic tools and approaches for analysis of DNA sequences, protein sequences, gene expression profiles, etc. (ii) understand important problems and applications of computational biology, including identifying functional features in DNA and protein sequences, predicting protein function, and deriving diagnostic models from gene expression profiles, (iii) be confident to propose new solutions to both existing and emerging problems in computational biology.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3103", "ModuleTitle": "Computer Networks Practice", "ModuleDescription": "This module aims to provide an opportunity for the students to learn commonly-used network protocols in greater technical depth with their implementation details than a basic networking course. Students will perform hands-on experiments in configuring and interconnecting LANs using networking devices/technologies (e.g., routers, switches, SDN switches, and hubs), networking protocols (e.g., DHCP, DNS, RIP, OSPF, ICMP, TCP, UDP, wireless LAN, VLAN protocols, SIP, SSL, IPSec-VPN) and networking tools (e.g, tcpdump, netstat, ping, traceroute). Students will learn higher-layer network protocols and develop network applications (client/server, P2P) via socket programming.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3201", "ModuleTitle": "Software Engineering Project I", "ModuleDescription": "This module is the first part of a two-part series on the practice of software engineering in Software Development Life Cycle (SDLC). These two modules together provide the students with hands-on experience in working in project groups through a complete SDLC to develop a well-designed, welltested, large-scaled software system. This first part focuses on applying best software engineering practices on the analysis and design of software system. The students will practice analysis of user\u2019s needs, formulation of computing requirements to meet the user\u2019s needs, modeling and design of the computer systems according to the requirements, and evaluation of the design.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3201R", "ModuleTitle": "Software Engineering Project I", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS3202", "ModuleTitle": "Software Engineering Project II", "ModuleDescription": "This module is the second part of a two-part series on the practice of software engineering in Software Development Life Cycle (SDLC). These two modules together provide the students with hands-on experience in working in project groups through a complete SDLC to develop a well-tested, large-scaled software system. This second part focuses on applying best software engineering practices on the implementation and testing of the software system. The students will practice efficient implementation of software components, system integration, software version control, and rigorous testing.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3205", "ModuleTitle": "Information Security Capstone Project", "ModuleDescription": "This module provides students an active learning opportunity to work independently in a group on significant information security-related projects. Project activities can include analyzing the security requirements, designing and implementing security systems, and attacking and defending a system. Students get to apply what they learn in the classroom and gain hands-on experience on solving significant information security problems.", "Department": "Computer Science", "ModuleCredit": "8"},
{"ModuleCode": "CS3210", "ModuleTitle": "Parallel Computing", "ModuleDescription": "The aim of this module is to provide an introduction to the field of parallel computing with hands-on parallel programming experience on real parallel machines. The module is divided into four parts: parallel computation models and parallelism, parallel architectures, parallel algorithm design and programming, and new parallel computing models. Topics includes: theory of parallelism and models; shared-memory architectures; distributed-memory architectures; data parallel architectures; interconnection networks, topologies and basic of communication operations; principles of parallel algorithm design; performance and scalability of parallel programs, overview of new parallel computing models such as grid, cloud, GPGPU.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3216", "ModuleTitle": "Software Product Engineering for Digital Markets", "ModuleDescription": "In this module, students will practice software product engineering by working in small teams to develop well-tested, user-friendly, production-quality software for the real world. To support this goal, students work closely with users to understand their problems, gather their requirements, and obtain their feedback through a rapid, iterative, application design and development process. Students will also be exposed to practical issues for digital markets such as growing the user base of their application, deployment of the application on the Web or in the cloud system, and validating the UI design and UX of the application.", "Department": "Computer Science", "ModuleCredit": "5"},
{"ModuleCode": "CS3219", "ModuleTitle": "Software Engineering Principles and Patterns", "ModuleDescription": "This module provides an in-depth, hands-on experience in key aspects of software engineering that accompany the development of software. Based on proven principles and best practices, this module focuses on software architectural design from the perspective of the software process. It covers techniques for requirement elicitation and specification that provide sound base for architectural design. The module covers design decision exploration as well as patterns that explicate principles and best practices in replicable form.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3230", "ModuleTitle": "Design and Analysis of Algorithms", "ModuleDescription": "This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students' ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3230R", "ModuleTitle": "Design and Analysis of Algorithms", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS3235", "ModuleTitle": "Computer Security", "ModuleDescription": "The objective of this module is to provide a broad understanding of computer security with some indepth discussions on selected topics in system and network security. This module covers the following topics: intrusion detection, DNS security, electronic mail security, authentication, access control, buffer overflow, memory and stack protection, selected topics in application security, for instance, web security, and well-known attacks.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3240", "ModuleTitle": "Interaction Design", "ModuleDescription": "This course is intended for students in computing and related disciplines whose work focuses on human-computer interaction issues in the design of computer systems. The course stresses the importance of user-centred design and usability in the development of computer applications and systems. Students will be taken through the analysis, design, development, and evaluation of human-computer interaction methods for computer systems. They will acquire hands-on design skills through laboratory exercises and assignments. The course also covers HCI design principles and emphasizes the importance of contextual, organisational, and social factors in system design.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3240R", "ModuleTitle": "Interaction Design", "ModuleDescription": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS3241", "ModuleTitle": "Computer Graphics", "ModuleDescription": "This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS3241R", "ModuleTitle": "Computer Graphics", "ModuleDescription": "This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.", "Department": "Computer Science", "ModuleCredit": "1"},
{"ModuleCode": "CS3244", "ModuleTitle": "Machine Learning", "ModuleDescription": "This module introduces basic concepts and algorithms in machine learning and neural networks. The main reason for studying computational learning is to make better use of powerful computers to learn knowledge (or regularities) from the raw data. The ultimate objective is to build self-learning systems to relieve human from some of already-too-many programming tasks. At the end of the course, students are expected to be familiar with the theories and paradigms of computational learning, and capable of implementing basic learning systems.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4211", "ModuleTitle": "Formal Methods for Software Engineering", "ModuleDescription": "Before software can be designed, its requirements must be well understood. This in turns requires a thorough understanding of the application domain. In developing domain descriptions and requirement specifications, we need to acquire and analyse domain knowledge and system requirements, transform them into domain and requirement models, and validate these models together with domain and requirement stakeholders. Once the domain and requirement descriptions are clear, a software design can be constructed to capture software architecture and components. This course will cover the principles and techniques of these three major phases of software engineering: Domain Engineering, Requirements Engineering and Software Design.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4212", "ModuleTitle": "Compiler Design", "ModuleDescription": "The objective of this module is to introduce the principal ideas behind program compilation, and discusses various techniques for program parsing, program analysis, program optimisation, and run-time organisation required for program execution. Topics covered include regular expressions, context-free grammars, lexical analysis, syntax analysis; different algorithms for parsing codes, such as top-down parsing, bottom-up parsing; translation to abstract syntax using modern parser generator technology, intermediate representation, semantics analysis, type system, un-optimised code generation, code optimisation, data-flow analysis, instruction scheduling.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4223", "ModuleTitle": "Multi-core Architectures", "ModuleDescription": "The world of parallel computer architecture has gone through a significant transformation in the recent years from high-end supercomputers used only for scientific applications to the multi-cores (multiple processing cores on a single chip) that are ubiquitous in mainstream computing systems including desktops, servers, and embedded systems. In the context of this exciting development, the aim of this module is to examine the design issues that are critical to modern parallel architectures. Topics include instruction-level parallelism through static and dynamic scheduling, shared memory, message-passing, and data parallel computer architectures, cache coherence protocols, hardware synchronization primitives, and memory consistency models.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4224", "ModuleTitle": "Distributed Databases", "ModuleDescription": "This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4226", "ModuleTitle": "Internet Architecture", "ModuleDescription": "This module aims to focus on advanced networking concepts pertaining to the modern Internet architecture and applications. It covers a range of topics including network performance (throughput, delay, Little\u2019s Law and M/M/1 queuing formula), and resource allocation and buffer management (max-min fair, round-robin and RED), intra- and inter-domain routing (RIP, OSPF and BGP), congestion control and modern variations of TCP (AIMD and Cubic TCP), peer-to-peer applications and content delivery networks (BitTorrent, Skype, Akamai), and data center networking and management (SDN and OpenFlow).", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4232", "ModuleTitle": "Theory of Computation", "ModuleDescription": "The objective of this module is to provide students with a theoretical understanding of what can be computed, and an introduction to the theory of complexity. It aims to introduce (1) some standard formal models of computation so as to develop an understanding of what can or cannot be computed by various computing devices; (2) some reasoning techniques commonly used in computer science; these include model equivalence, non-determinism, digitalisation, simulation and reduction; and (3) the mathematical formulation of objects in computer science so as to study their properties.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4234", "ModuleTitle": "Optimisation Algorithms", "ModuleDescription": "This module covers common algorithmic techniques for solving optimisation problems, and introduces students to approaches for finding good-enough solutions to NP-hard problems. Topics covered include linear and integer programming, network flow algorithms, local search heuristics, approximation algorithms, and randomized algorithms. Through analysis and application of the techniques to a variety of canonical problems, students develop confidence to (i) appropriately model a given optimisation problem, (ii) apply appropriate algorithmic techniques to solve the problem, (iii) analyse the properties of the problem and candidate algorithms, such as time and space complexity, convergence, approximability, and optimality bound.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4236", "ModuleTitle": "Cryptography Theory and Practice", "ModuleDescription": "This module aims to introduce the foundation, principles and concepts behind cryptology and the design of secure communication systems. The emphasis is on the formulation and techniques of various cryptographic primitives, and on the secure usage of such primitives to achieve the goals of confidentially, integrity, and authenticity in both theoretical settings and practical scenarios. Basic topics include pseudorandom functions, symmetric key encryption, public key encryption, message authentication codes, hash functions, digital signatures, key exchange and PKI. Selected topics may include: secret sharing, TCP/IP security, Kerberos, SSL, trusted computing, side-channel attacks.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4238", "ModuleTitle": "Computer Security Practice", "ModuleDescription": "This is a practice security module with emphasis on hands-on experiences of computer security. The objective of this module is to connect computer security knowledge to practical skills, including common attacks and protection mechanisms, system administration, and development of secured software. Topics covered include network security, operating system security, and application security, such as DNS attacks, memory-error exploits, and web application attacks. Students will learn through lab-based exercises and assignments.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4239", "ModuleTitle": "Software Security", "ModuleDescription": "Software engineering processes need to include security considerations in the modern world. This module familiarizes students to security issues in different stages of the software life-cycle. At the end of the module, the students are expected to understand secure programming practices, be able to analyse and check for impact of malicious inputs in programs, and employ specific testing techniques which can help detect software vulnerabilities.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4243", "ModuleTitle": "Computer Vision and Pattern Recognition", "ModuleDescription": "In this module, various methods for computers to understand and interpret the contents of images are investigated. The objective is to expose the students to the basic concepts underlying various computer vision techniques and the application of current techniques for problem solving. Topics covered include morphological operations, convolution and cross correlation, edge and corner detection, colour, texture, motion, image registration and mosaicking, 3D vision, camera calibration and 3D reconstruction, eigenface and pattern recognition. Laboratory exercises and projects are included for the students to solve practical problems using computer vision and image processing software packages.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4246", "ModuleTitle": "AI Planning and Decision Making", "ModuleDescription": "This module introduces the major concepts and paradigms in planning and decision making in complex environments. It examines issues, challenges, and techniques in problem representation, goal or objective specification, response selection, and action consequence for a wide range of strategic and tactical planning and decision making situations. Topics covered include deterministic and non-deterministic planning, practical planning and acting under resource constraints and uncertainy, expected utility and rational decision making, decision networks, Markov decision processes, elementary game theory, and multi-agent planning and decision making.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4248", "ModuleTitle": "Natural Language Processing", "ModuleDescription": "This module deals with computer processing of human languages, emphasizing a corpus-based empirical approach. The topics covered include: 1. Linguistic essentials. 2. Basic techniques and algorithms: Hidden Markov model, Viterbi algorithm, supervised learning algorithms. 3. Words: part-of-speech tagging. 4. Syntax: noun phrase chunking, named entity tagging, parsing (top down, bottom up, probabilistic). 5. Semantics: word sense disambiguation. 6. Pragmatics: discourse, co-reference resolution. 7. Applications: text categorisation, text summarisation, language identification, information extraction, question answering, machine translation.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4249", "ModuleTitle": "Phenomena and Theories of Human-Computer Interaction", "ModuleDescription": "This module teaches the underlying science of Human-Computer Interaction (HCI) and its application to user interface design. It surveys a wide range of psychological theories beginning with organizational behaviour approaches, understanding of work and workflow within organizations, and moving on to understanding human psychological architecture and processing constraints. It demonstrates via a combination of scientific theory understanding and engineering modelling the solutions of design problems facing a user interface designer. It also covers new design methods and techniques available and the new conceptual mechanisms used in HCI such as the metaphors for describing user interaction.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4350", "ModuleTitle": "Game Development Project", "ModuleDescription": "The objective of this project-based module is to provide an opportunity for the students to work in a group to design and develop a game following the main stages of game development process. The module will focus on the design of core dynamic, game mechanics, strategy, progression, balancing, game levels, interface and technical features including 3D graphics, animation, AI, physics, and networking. In addition, software engineering principles will be practised in developing the game software.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS4351", "ModuleTitle": "Real-Time Graphics", "ModuleDescription": "Real-time graphics is driving many interactive computer applications, such as 3D games, VR, 3D modelling, and data visualization. Recent rendering techniques have been heavily exploiting the powerful graphics hardware to achieve unprecedented performance and effects. In this module, students study the modern real-time rendering pipeline and GPU architecture, learn about modern and traditional real-time rendering techniques, and write shaders to implement these techniques for the GPU. The syllabus includes multiple-pass rendering; shading and reflection models; procedural texture-mapping and shading; lights and shadows; noise and natural materials; non-photorealistic rendering; volume rendering; deferred shading; scene management; post-rendering processing; performance analysis and optimization.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5201", "ModuleTitle": "Foundation in Theoretical CS", "ModuleDescription": "The purpose of this module is to test the students on basic concepts in theoretical computer science. In particular, the students will be tested on the following areas. A.\tDesign and Analysis of Algorithms B.\tTheory of Computation C.\tProgramming Languages D.\tLogic and Formal Systems The respective undergraduate modules: CS3230, CS3231, CS3212, CS3234", "Department": "Computer Science", "ModuleCredit": "0"},
{"ModuleCode": "CS5202", "ModuleTitle": "Foundation in Computer Systems", "ModuleDescription": "The purpose of this module is to test the students on basic concepts in computer systems. In particular, the students will be tested on the following topics. A. Advanced Operating Systems B. Computer Networks II C. Database Management Systems D. Computer Architecture The respective undergraduate modules: CS3221, CS3103, CS3223, CS3220", "Department": "Computer Science", "ModuleCredit": "0"},
{"ModuleCode": "CS5223", "ModuleTitle": "Distributed Systems", "ModuleDescription": "The topic of Distributed Systems is now garnering increasing importance, especially with the advancement in technology of the Internet and WWW. The aim of this module is to provide students with basic concepts and principles of distributed operating systems, interprocess communications, distributed file systems, shared data, and the middleware approach. The module is taught in seminar style, and several case studies are included, e.g. CORBA. Topics: Introduction - Characteristics of Distributed Systems; Process Management Communication in Distributed Systems; Distributed Synchronisation; Distributed Real-time Systems; File Systems; Naming Security; Fault Tolerant Distributed Systems; Distributed Simulation; WWW as an application of Distributed System.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5228", "ModuleTitle": "Knowledge Discovery and Data Mining", "ModuleDescription": "This course introduces fundamental principles behind data mining and efficient techniques for mining large databases. It provides an overview of the algorithmic aspect of data mining: its efficiency (high-dimensional database indexing, OLAP, data reduction, compression techniques) and effectiveness (machine learning involving greedy search, branch and bound, stochastic search, parameter optimisation). Efficient techniques covered include association rules mining (Apriori algorithm, correlation search, constrained association rule discovery), classifier induction (decision trees, RainForest, SLIQ; Support vector machine; Naive Bayesian; classification based on association / visualisation), cluster analysis (k-means, k-mediods, DBSCAN, OPTICS, DENCLUE, STING, CLUSEQ, ROCK etc), and outliers/deviants detection (LOF, Distance-based outlier etc).", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5229", "ModuleTitle": "Advanced Computer Networks", "ModuleDescription": "This course covers advanced fundamental principles of computer networks and techniques for networking. The goal of this course is to teach these fundamentals/techniques that will remain important and relevant regardless of the hot topics in networks and networking. Briefly, the topics include advanced network architecture and design principles, protocol mechanisms, implementation principles and software engineering practices, network algorithmic, network simulation techniques and tools, performance analysis and measurement, and protocol specification/verification techniques.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5231", "ModuleTitle": "Systems Security", "ModuleDescription": "This module introduces fundamental notions and requirements in computer system security and the mechanisms that provide security in various systems and applications. It aims to teach students the security perspective of popular computer systems, such as desktop systems, mobile systems, and web-based systems. Its topics include software security, operating system security, mobile security, web security, trusted platforms, and auditing and forensic analysis.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5234", "ModuleTitle": "Combinatorial and Graph Algorithms", "ModuleDescription": "This course presents advanced material on the design and analysis of combinatorial algorithms with emphasis on efficient algorithms and data structures. This course is meant for students who intend to (i) do research in computer science in general, and algorithm design in particular, or (ii) do advanced application/software development in other areas of computer science. (It assumes that the student has already done one course on design and analysis of algorithms equivalent to CS3230.)", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5239", "ModuleTitle": "Computer System Performance Analysis", "ModuleDescription": "The objective of this module is to provide students a working knowledge of computer performance evaluation and capacity planning. They will be able to identify performance bottlenecks, to predict when performance limits of a system will be exceeded, and to characterise present and future workload to perform capacity planning activities. Topics include: performance analysis overview; measurement techniques and tools including workload characterisation, instrumentation, benchmarking, analytical modelling techniques including operational analysis, stochastic queuing network analysis; performance of client-server architectures; capacity planning; case studies.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5242", "ModuleTitle": "Neural Networks and Deep Learning", "ModuleDescription": "This module provides students with the knowledge of deep neural network and enables them to apply deep learning methods effectively on real world problems. The module emphasizes on the understanding of the principles of neural networks and deep learning; practical guidelines and techniques for deep learning; and their applications. Through assignments and projects, students will design, develop, and evaluate deep learning-based solutions to practical problems, such as those in the areas of computer vision, bioinformatics, fintech, cybersecurity, and games.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5248", "ModuleTitle": "Systems Support for Continuous Media", "ModuleDescription": "This module is targeted at computer science graduate students and covers the major aspects of building streaming media applications -- from coding to transmission to playback. Issues such as transport protocols, control protocols, caching, buffering, synchronisation and adaptations will be examined.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS5340", "ModuleTitle": "Uncertainty Modelling in AI", "ModuleDescription": "The module covers modelling methods that are suitable for reasoning with uncertainty. The main focus will be on probabilistic models including Bayesian networks and Markov networks. Topics include representing conditional independence, building graphical models, inference using graphical models and learning from data. Selected applications in various domains such as speech, vision, natural language processing, medical informatics, bioinformatics, data mining and others will be discussed.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS6101", "ModuleTitle": "Exploration of Computer Science Research", "ModuleDescription": "This module introduces CS graduate students to various research areas in Computer Science. Study groups are organised for major research areas. Each study group provides a forum for students to read, present and discuss research papers, and acquire the basic research skills for literature review and critical comparison of existing work. Students will also gain a first experience in technical presentation and writing. This module will be graded as \u201cCompleted Satisfactory\u201d or \u201cCompleted Unsatisfactory\u201d (CS/CU).", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS6202", "ModuleTitle": "Advanced Topics in Programming Languages", "ModuleDescription": "This module discusses the contemporary concepts in the design and implementation of major programming languages and systems. It aims to provide students with advanced technical knowledge in evaluating, designing, and implementing an efficient and expressive programming language/system. Topics are selected from a group of contemporary issues that has substantial impact in the development of programming languages/systems, either in terms of performance efficiency or programming expressivity. These include, but not restricted to, computational models, program semantics, concurrency theory, garbage collection techniques, program analysis, type inference, program calculation and transformation, run-time profiling, implementation models, meta-programming.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS6203", "ModuleTitle": "Advanced Topics in Database Systems", "ModuleDescription": "This module covers the topics in data base management systems with current research and industrial interests and importance. Examples of topics include multimedia data management, object-oriented database technology, data warehousing and data mining, integration of heterogeneous and legacy systems.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS6230", "ModuleTitle": "Topics in Information Security", "ModuleDescription": "This module aims to prepare graduate students for research and development in information security, by investigating selected topics in cryptography and information theoretic security. Selected topics may include classical issues such as provable security, design of symmetric key ciphers, and public key cryptography, as well as emerging topics, such as pairing-based cryptography, homomorphic encryption, privacy-preserving methods, information hiding, and data forensic. Other topics of current research interests may also be included.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS6234", "ModuleTitle": "Advanced Algorithms", "ModuleDescription": "This module is aimed at graduate students who are doing or intend to do advanced research in algorithms design and analysis in all areas of computer science. The module covers advanced material on combinatorial and graph algorithms with emphasis on efficient algorithms, and explores their use in a variety of application areas. Topics covered include, but are not restricted to, linear programming, graph matching and network flows, approximation algorithms, randomized algorithms, online algorithms, local search algorithms, algorithms for large datasets. The module will be a seminar-based module that will expose students to current research in these areas.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CS6244", "ModuleTitle": "Robot Motion Planning & Control", "ModuleDescription": "An array of new robots with amazing capabilities appeared in the last decade, e.g., self-driving cars, humanoids, and robot vacuum cleaners. They will gradually, but surely, transform our ways of life in the near future. This course presents the key algorithmic ideas and implementation techniques that enable autonomous robot planning and control. It covers the geometric, probabilistic, and dynamic models and the associated methods commonly used in robotics. Application to related fields, such as computer animation and computation biology, will also be discussed.", "Department": "Computer Science", "ModuleCredit": "4"},
{"ModuleCode": "CSA6101", "ModuleTitle": "Cultural Studies Theory And Analysis", "ModuleDescription": "This is a foundational module aimed at providing a common conceptual ground for all the candidates in the PhD programme in Cultural Studies in Asia. It examines the works of various theorists from which Cultural Studies draw its concepts and analytic frameworks. It examines how these concepts and frameworks are utilized in the analysis of particular cultural practices and interventions in contemporary societies. Students gain additional depth as they work through the concepts and frameworks in the research papers for this module.", "Department": "Dean's Office (Arts & Social Sc.)", "ModuleCredit": "4"},
{"ModuleCode": "CSA6770", "ModuleTitle": "Graduate Research Seminar", "ModuleDescription": "This is a required module for all PhD candidates in Cultural Studies in Asia programme. It is a forum for candidates to engage each other in critical discussion of their dissertation and other research projects. Each candidate is required to present a formal research paper. Active participation from each is expected. The module will be graded Satisfactory/Unsatisfactory' on the basis of a candidate's presentation and participation in discussions throughout the semester.", "Department": "Sociology", "ModuleCredit": "4"}
]